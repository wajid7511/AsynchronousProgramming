@page "/"
<PageTitle>Progressive App</PageTitle>

<div class="row">
    <div class="col" style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
        @if (!taskProgressOne.IsRunning && !taskProgressTwo.IsRunning)
        {
            <button class="btn btn-primary" @onclick="RunTasks">Run Tasks</button>
        }
        <h2>Overall Progress</h2>
        <h3>@overAllPercentage %</h3>
        <div class="progress" style="width: 100%;">
            <div class="progress-bar" role="progressbar" style="width:@overAllPercentage%"
                aria-valuenow="@overAllPercentage" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>
</div>
<br />
<br />
<div class="row">

    <div class="col">
        @if (taskProgressOne.IsRunning)
        {
            <button class="btn btn-danger" @onclick="CancelTaskOne">Cancel Task 1</button>
        }

        <h2>Task 1 Progress: @taskProgressOne.Percentage %</h2>
        <div class="progress">
            <div class="progress-bar" role="progressbar" style="width:@taskProgressOne.Percentage%"
                aria-valuenow="@taskProgressOne.Percentage" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        @if (!string.IsNullOrEmpty(taskProgressOne.CancellationMessage))
        {
            <p class="text-danger">@taskProgressOne.CancellationMessage</p>
        }
    </div>
    <div class="col">
        @if (taskProgressTwo.IsRunning)
        {
            <button class="btn btn-danger" @onclick="CancelTaskTwo">Cancel Task 2</button>
        }

        <h2>Task 2 Progress: @taskProgressTwo.Percentage %</h2>
        <div class="progress">
            <div class="progress-bar" role="progressbar" style="width:@taskProgressTwo.Percentage%"
                aria-valuenow="@taskProgressTwo.Percentage" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        @if (!string.IsNullOrEmpty(taskProgressTwo.CancellationMessage))
        {
            <p class="text-danger">@taskProgressTwo.CancellationMessage</p>
        }
    </div>
</div>

@code {
    // DTO for task
    public class TaskProgressDto
    {
        public double Percentage { get; set; } = 0.0;
        public bool IsRunning { get; set; } = false;
        public string CancellationMessage { get; set; } = string.Empty;
        public Progress<double> Progress = new Progress<double>();
        public CancellationTokenSource CancellationSource = new();
    }
    private double overAllPercentage => Math.Round((taskProgressOne.Percentage + taskProgressTwo.Percentage) / 2, 2);
    private TaskProgressDto taskProgressOne = new TaskProgressDto();
    private TaskProgressDto taskProgressTwo = new TaskProgressDto();

    protected override void OnInitialized()
    {
        taskProgressOne.Progress.ProgressChanged += OnTaskOneProgressUpdate;
        taskProgressTwo.Progress.ProgressChanged += OnTaskTwoProgressUpdate;
    }
    private void RunTasks()
    {
        taskProgressOne.IsRunning = true;
        taskProgressTwo.IsRunning = true;
        taskProgressOne.CancellationMessage = string.Empty;
        taskProgressTwo.CancellationMessage = string.Empty;
        taskProgressOne.Percentage = 0.0;
        taskProgressTwo.Percentage = 0.0;

        StateHasChanged();

        taskProgressOne.CancellationSource = new CancellationTokenSource();
        taskProgressTwo.CancellationSource = new CancellationTokenSource();

        _ = TaskOneAsync(taskProgressOne.Progress, taskProgressOne.CancellationSource.Token);
        _ = TaskTwoAsync(taskProgressTwo.Progress, taskProgressTwo.CancellationSource.Token);
    }

    // Task One progress update
    public void OnTaskOneProgressUpdate(object sender, double progress)
    {
        taskProgressOne.Percentage = progress;
        if (taskProgressOne.Percentage == 100)
        {
            taskProgressOne.IsRunning = false;
        }
        InvokeAsync(StateHasChanged); // Ensure UI refresh
    }

    // Task Two progress update
    public void OnTaskTwoProgressUpdate(object sender, double progress)
    {
        taskProgressTwo.Percentage = progress;
        if (taskProgressTwo.Percentage == 100)
        {
            taskProgressTwo.IsRunning = false;
        }
        InvokeAsync(StateHasChanged); // Ensure UI refresh
    }

    // Task One Execution
    public async ValueTask TaskOneAsync(IProgress<double> progress, CancellationToken cancellationToken)
    {
        int loopLength = 100;
        for (int i = 0; i <= loopLength; i++)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                taskProgressOne.IsRunning = false;
                return;
            }
            double percentage = Math.Round((double)i / loopLength * 100, 2);
            progress.Report(percentage);
            await Task.Delay(100, cancellationToken); // Ensure Task.Delay respects cancellation
        }

        taskProgressOne.IsRunning = false;
    }

    // Task Two Execution
    public async ValueTask TaskTwoAsync(IProgress<double> progress, CancellationToken cancellationToken)
    {
        int loopLength = 1000;
        for (int i = 0; i <= loopLength; i++)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                taskProgressTwo.IsRunning = false;
                return;
            }
            double percentage = Math.Round((double)i / loopLength * 100, 2);
            progress.Report(percentage);
            await Task.Delay(10, cancellationToken); // Ensure Task.Delay respects cancellation
        }

        taskProgressTwo.IsRunning = false;
    }

    // Cancel Task One
    public void CancelTaskOne()
    {
        taskProgressOne.CancellationSource.Cancel();
        taskProgressOne.IsRunning = false;
        taskProgressOne.CancellationMessage = $"Task 1 was canceled at {taskProgressOne.Percentage}%";
        StateHasChanged();
    }

    // Cancel Task Two
    public void CancelTaskTwo()
    {
        taskProgressTwo.CancellationSource.Cancel();
        taskProgressTwo.IsRunning = false;
        taskProgressTwo.CancellationMessage = $"Task 2 was canceled at {taskProgressTwo.Percentage}%";
        StateHasChanged();
    }

    public void Dispose()
    {
        taskProgressOne.Progress.ProgressChanged -= OnTaskOneProgressUpdate;
        taskProgressTwo.Progress.ProgressChanged -= OnTaskTwoProgressUpdate;
    }
}
